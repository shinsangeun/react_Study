{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","routes/Detail.js","routes/Video.jsx","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","Movie","genres","synopsis","map","index","key","Home","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","year","summary","medium_cover_image","React","Component","About","props","console","log","Detail","location","history","undefined","push","Video","useState","playIndex","setPlayIndex","playList","url","playing","controls","muted","progressInterval","pip","onEnded","video","length","handleNextVideo","width","height","Navigation","to","App","path","exact","component","Player","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.364d7c3d.chunk.js","sourcesContent":["import React from 'react';\nimport './Movie.css';\nimport PropTypes from 'prop-types';\n\nfunction Movie({title, poster, genres, synopsis}) {\n    return(\n        <div className=\"Movie\">\n            <div className=\"Movie__Columns\">\n                <MoviePoster poster={poster} alt={title}/>\n            </div>\n            <div className=\"Movie_Columns\">\n            <h1>{title}</h1>\n                <div className=\"Movie_Genres\">\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\n                </div>\n                <p className=\"Movie_Synopsis\">\n                    {synopsis}\n                </p>\n\n            </div>\n        </div>\n    )\n}\n\nfunction MoviePoster({poster, alt}) {\n    return(\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\n    )\n}\n\nfunction MovieGenre({genre}){\n    return(\n        <span className=\"Movie_Genres\">{genre}</span>\n    )\n}\n\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n};\n\nMoviePoster.propTypes = {\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n};\n\nMovieGenre.propTypes = {\n    genre: PropTypes.string.isRequired\n};\n\nexport default Movie;\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"../components/Movie\";\nimport \"./Home.css\";\n\nclass Home extends React.Component {\n    state = {\n        isLoading: true,\n        movies: []\n    };\n    getMovies = async () => {\n        const {\n            data: {\n                data: { movies }\n            }\n        } = await axios.get(\n            \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n        );\n        this.setState({ movies, isLoading: false });\n    };\n    componentDidMount() {\n        this.getMovies();\n    }\n    render() {\n        const { isLoading, movies } = this.state;\n        return (\n            <section className=\"container\">\n                {isLoading ? (\n                    <div className=\"loader\">\n                        <span className=\"loader__text\">Loading...</span>\n                    </div>\n                ) : (\n                    <div className=\"movies\">\n                        {movies.map(movie => (\n                            <Movie\n                                key={movie.id}\n                                id={movie.id}\n                                year={movie.year}\n                                title={movie.title}\n                                summary={movie.summary}\n                                poster={movie.medium_cover_image}\n                                genres={movie.genres}\n                                //synopsis={movie.synopsis}\n                            />\n                        ))}\n                    </div>\n                )}\n            </section>\n        );\n    }\n}\n\nexport default Home;","import React from \"react\";\nimport \"./About.css\";\n\nfunction About(props) {\n    console.log(props);\n    return (\n        <div className=\"about__container\">\n      <span>\n        “Freedom is the freedom to say that two plus two make four. If that is\n        granted, all else follows.”\n      </span>\n            <span>− George Orwell, 1984</span>\n        </div>\n    );\n}\n\nexport default About;","import React from \"react\";\n\nclass Detail extends React.Component {\n    componentDidMount() {\n        const { location, history } = this.props;\n        if (location.state === undefined) {\n            history.push(\"/\");\n        }\n    }\n    render() {\n        const { location } = this.props;\n        if (location.state) {\n            return <span>{location.state.title}</span>;\n        } else {\n            return null;\n        }\n    }\n}\nexport default Detail;","import ReactPlayer from 'react-player/lazy';\nimport React, {useEffect, useState} from \"react\";\n\nfunction Video() {\n// const Video = ({playList, index}) => {\n    const [playIndex, setPlayIndex] = useState(0);\n    const playList = [\n        {index:1, url: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4'},\n        {index:2, url: 'http://sample.vodobox.net/skate_phantom_flex_4k/skate_phantom_flex_4k.m3u8'},\n        {index:3, url: 'http://playertest.longtailvideo.com/adaptive/wowzaid3/playlist.m3u8'}\n    ];\n\n    const handleNextVideo = (video, playIndex) => {\n        if(playIndex === video.length - 1){\n            setPlayIndex(0);\n        }else{\n            setPlayIndex(playIndex + 1);\n        }\n    }\n\n    const selectVideo = (index) => {\n        setPlayIndex(index);\n    }\n\n    if(playList === null) return <p>Loading...</p>;\n\n    return (\n        <>\n            <h2>Player Test</h2>\n            <ReactPlayer\n                url={playList[playIndex].url}\n                playing\n                controls\n                muted\n                progressInterval={1000}\n                pip={true}\n                onEnded={() => {handleNextVideo(playList, playIndex)}}\n                width={'800px'}\n                height={'500px'}\n            />\n        </>\n    )\n}\n\nexport default Video;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Navigation.css\";\n\nfunction Navigation() {\n    return (\n        <div className=\"nav\">\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/about\">About</Link>\n        </div>\n    );\n}\n\nexport default Navigation;","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport About from \"./routes/About\";\nimport Detail from \"./routes/Detail\";\nimport Player from \"./routes/Video\";\nimport Navigation from \"./components/Navigation\";\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <HashRouter>\n            <Navigation />\n            <Route path=\"/\" exact={true} component={Home} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/movie/:id\" component={Detail} />\n            <Route path=\"/video\" component={Player} />\n        </HashRouter>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}